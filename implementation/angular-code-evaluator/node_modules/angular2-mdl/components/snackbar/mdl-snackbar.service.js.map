{"version":3,"file":"mdl-snackbar.service.js","sourceRoot":"","sources":["../../../src/lib/components/snackbar/mdl-snackbar.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  NgModule,\n  ViewEncapsulation,\n  ModuleWithProviders, ComponentFactory, NgZone\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdlDialogOutletService } from '../dialog-outlet/mdl-dialog-outlet.service';\nimport { MdlDialogOutletModule } from '../dialog-outlet/index';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n\nconst ANIMATION_TIME = 250;\n\n\nexport class MdlSnackbarComponent {\n  public message: string;\n  public actionText: string;\n  private showIt = false;\n  public onAction: () => void;\n\n  constructor(private ngZone: NgZone){}\n\n  public onClick() {\n    this.onAction();\n  }\n\n  public isActive() {\n    return this.showIt;\n  }\n\n  public show(): Observable<void> {\n    let result: Subject<any> = new Subject();\n      // wait unit the dom is in place - then showIt will change the css class\n      setTimeout(() => {\n        this.showIt = true;\n        // fire after the view animation is done\n        setTimeout(() => {\n          result.next(null);\n          result.complete();\n        }, ANIMATION_TIME);\n      }, 10);\n\n\n    return result.asObservable();\n  }\n\n  public hide(): Observable<void> {\n    this.showIt = false;\n\n    let result: Subject<any> = new Subject();\n\n    // fire after the view animation is done\n    setTimeout(() => {\n      result.next(null);\n      result.complete();\n    }, ANIMATION_TIME);\n\n\n    return result.asObservable();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mdl-snackbar-component',\n  template: `\n    <div id=\"demo-toast-example\" class=\" mdl-snackbar\" [ngClass]=\"{'mdl-snackbar--active': showIt }\">\n      <div class=\"mdl-snackbar__text\">{{message}}</div>\n      <button *ngIf=\"onAction\" class=\"mdl-snackbar__action\" type=\"button\" (click)=\"onClick()\" >{{actionText}}</button>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgZone, },\n];\n}\n\nexport interface IMdlSnackbarMessage {\n  message: string;\n  timeout?: number;\n  action?: {\n    handler: () => void;\n    text: string;\n  };\n}\n\n\nexport class MdlSnackbarService {\n\n  private cFactory: ComponentFactory<any>;\n\n  constructor(\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private dialogOutletService: MdlDialogOutletService) {\n\n    this.cFactory  = this.componentFactoryResolver.resolveComponentFactory(MdlSnackbarComponent);\n  }\n\n\n  public showToast(message: string, timeout?: number): Observable<MdlSnackbarComponent> {\n    return this.showSnackbar({\n      message: message,\n      timeout: timeout\n    });\n  }\n\n  public showSnackbar(snackbarMessage: IMdlSnackbarMessage): Observable<MdlSnackbarComponent> {\n\n    let optTimeout        = snackbarMessage.timeout || 2750;\n    let viewContainerRef  = this.dialogOutletService.viewContainerRef;\n\n    if (!viewContainerRef) {\n      throw new Error('You did not provide a ViewContainerRef. ' +\n        'Please see https://github.com/mseemann/angular2-mdl/wiki/How-to-use-the-MdlDialogService');\n    }\n\n\n    let cRef = viewContainerRef.createComponent(this.cFactory, viewContainerRef.length);\n\n    let mdlSnackbarComponent = <MdlSnackbarComponent> cRef.instance;\n    mdlSnackbarComponent.message = snackbarMessage.message;\n\n\n    // TODO make sure only one snackbar is visible at one time\n    // observable? push the configured instance and consume one after another?\n\n    if (snackbarMessage.action) {\n      mdlSnackbarComponent.actionText = snackbarMessage.action.text;\n      mdlSnackbarComponent.onAction = () => {\n        mdlSnackbarComponent.hide().subscribe(() => {\n          cRef.destroy();\n          snackbarMessage.action.handler();\n        });\n      };\n    } else {\n      setTimeout( () => {\n        mdlSnackbarComponent.hide().subscribe(() => {cRef.destroy(); });\n      }, optTimeout);\n    }\n\n    let result: Subject<MdlSnackbarComponent> = new Subject<MdlSnackbarComponent>();\n\n    mdlSnackbarComponent.show().subscribe( () => {\n      result.next(mdlSnackbarComponent);\n      result.complete();\n    });\n\n    return result.asObservable();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Injector, },\n{type: ComponentFactoryResolver, },\n{type: MdlDialogOutletService, },\n];\n}\n\n\nexport class MdlSnackbaModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdlSnackbaModule,\n      providers: [MdlSnackbarService]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdlDialogOutletModule.forRoot()],\n  exports: [MdlSnackbarComponent],\n  declarations: [MdlSnackbarComponent],\n  entryComponents: [MdlSnackbarComponent]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}