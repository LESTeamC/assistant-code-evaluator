{"version":3,"file":"mdl-radio.component.js","sourceRoot":"","sources":["../../../src/lib/components/radio/mdl-radio.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Renderer,\n  forwardRef,\n  Input,\n  NgModule,\n  OnInit,\n  Injectable,\n  OnDestroy,\n  ViewEncapsulation,\n  ModuleWithProviders\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  FormsModule\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { BooleanProperty } from '../common/boolean-property';\n\nconst noop = () => {};\nconst IS_FOCUSED = 'is-focused';\n\n// Registry for mdl-readio compnents. Is responsible to keep the\n// right state of the radio buttons of a radio group. It would be\n// easier if i had a mdl-radio-group component. but this would be\n// a big braking change.\n\nexport class MdlRadioGroupRegisty {\n\n  private radioComponents: any[] = [];\n\n  public add(radioComponent: MdlRadioComponent) {\n    this.radioComponents.push(radioComponent);\n  }\n\n  public remove(radioComponent: MdlRadioComponent) {\n    this.radioComponents.slice(this.radioComponents.indexOf(radioComponent), 1);\n  }\n\n  public select(radioComponent: MdlRadioComponent) {\n    // unselect evenry radioComponent that is not the provided radiocomponent and has the same name\n    this.radioComponents.forEach( (component) => {\n      if (component.name === radioComponent.name) {\n        if (component !== radioComponent) {\n          component.deselect(radioComponent.value);\n        }\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n/*\n <mdl-radio name=\"group1\" value=\"1\" [(ngModel)]=\"radioOption\">Value 1</mdl-radio>\n */\n\n\nexport class MdlRadioComponent implements ControlValueAccessor, OnInit, OnDestroy {\n\n   public name: string;\n   public formControlName: string;\n   public value: any;\n   @BooleanProperty() public disabled = false;\n\n   public change: EventEmitter<any> = new EventEmitter<any>();\n\n  public optionValue: any;\n  // the internal state - used to set the underlaying radio button state.\n  public checked = false;\n\n  private el: HTMLElement;\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: () => void = noop;\n\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer,\n    private ragioGroupRegisty: MdlRadioGroupRegisty) {\n    this.el = elementRef.nativeElement;\n  }\n\n  public ngOnInit() {\n    // we need a name and it must be the same as in the formcontrol.\n    // a radio group without name is useless.\n    this.checkName();\n    // register the radio button - this is the only chance to unselect the\n    // radio button that is no longer active\n    this.ragioGroupRegisty.add(this);\n  }\n\n  public ngOnDestroy() {\n    this.ragioGroupRegisty.remove(this);\n  }\n\n  public writeValue(optionValue: any): void {\n    this.optionValue = optionValue;\n    this.updateCheckState();\n  }\n\n  public deselect(value: any) {\n    // called from the registry. the value is the value of the selected radio button\n    // e.g. the radio button get unselected if it isnÃ„t the selected one.\n    this.writeValue(value);\n  }\n\n  public registerOnChange(fn: any): void {\n    // wrap the callback, so that we can call select on the registry\n    this.onChangeCallback = () => {\n      fn(this.value);\n      this.ragioGroupRegisty.select(this);\n    };\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  protected onFocus() {\n    this.renderer.setElementClass(this.el, IS_FOCUSED, true);\n  }\n\n  protected onBlur() {\n    this.renderer.setElementClass(this.el, IS_FOCUSED, false);\n  }\n\n  protected onClick() {\n    if (this.disabled) {\n      return;\n    }\n    this.optionValue = this.value;\n    this.updateCheckState();\n    this.onChangeCallback();\n    this.change.emit(this.optionValue);\n  }\n\n  private updateCheckState() {\n    this.checked = this.optionValue === this.value;\n  }\n\n  private checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this.throwNameError();\n    }\n    if (!this.name && this.formControlName) {\n      this.name = this.formControlName;\n    }\n  }\n\n  private throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <mdl-radio formControlName=\"food\" name=\"food\"></mdl-radio>\n    `);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mdl-radio',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MdlRadioComponent),\n    multi: true\n  }],\n  host: {\n    '(click)': 'onClick()',\n    '[class.mdl-radio]': 'true',\n    '[class.is-upgraded]': 'true',\n    '[class.is-checked]': 'checked',\n    '[class.is-disabled]': 'disabled'\n  },\n  template: `\n  <input type=\"checkbox\" class=\"mdl-radio__button\" \n    [attr.name]=\"name\"\n    (focus)=\"onFocus()\" \n    (blur)=\"onBlur()\"\n    [disabled]=\"disabled\"\n    [(ngModel)]=\"checked\">\n  <span class=\"mdl-radio__label\"><ng-content></ng-content></span>\n  <span class=\"mdl-radio__outer-circle\"></span>\n  <span class=\"mdl-radio__inner-circle\"></span>\n  `,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: Renderer, },\n{type: MdlRadioGroupRegisty, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'formControlName': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\n\n\nexport class MdlRadioModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdlRadioModule,\n      providers: [MdlRadioGroupRegisty]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule],\n  exports: [MdlRadioComponent],\n  declarations: [MdlRadioComponent]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}